<?php
/**
 * JobTag automatically generated by SDKgen please do not edit this file manually
 * @see https://sdkgen.app
 */

namespace DeutschlandAPI\SDK;

use GuzzleHttp\Exception\BadResponseException;
use Sdkgen\Client\Exception\ClientException;
use Sdkgen\Client\Exception\UnknownStatusCodeException;
use Sdkgen\Client\TagAbstract;

class JobTag extends TagAbstract
{
    /**
     * Returns all available jobs
     *
     * @param int|null $page
     * @param string|null $search
     * @param string|null $location
     * @param string|null $employer
     * @return JobCollection
     * @throws ResponseException
     * @throws ClientException
     */
    public function getAll(?int $page = null, ?string $search = null, ?string $location = null, ?string $employer = null): JobCollection
    {
        $url = $this->parser->url('/job', [
        ]);

        $options = [
            'query' => $this->parser->query([
                'page' => $page,
                'search' => $search,
                'location' => $location,
                'employer' => $employer,
            ], [
            ]),
        ];

        try {
            $response = $this->httpClient->request('GET', $url, $options);
            $data = (string) $response->getBody();

            return $this->parser->parse($data, JobCollection::class);
        } catch (ClientException $e) {
            throw $e;
        } catch (BadResponseException $e) {
            $data = (string) $e->getResponse()->getBody();

            switch ($e->getResponse()->getStatusCode()) {
                case 400:
                    throw new ResponseException($this->parser->parse($data, Response::class));
                case 404:
                    throw new ResponseException($this->parser->parse($data, Response::class));
                case 500:
                    throw new ResponseException($this->parser->parse($data, Response::class));
                default:
                    throw new UnknownStatusCodeException('The server returned an unknown status code');
            }
        } catch (\Throwable $e) {
            throw new ClientException('An unknown error occurred: ' . $e->getMessage());
        }
    }


}
